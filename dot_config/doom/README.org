#+TITLE: Emacs Config
#+AUTHOR: Zach Dodge
#+PROPERTY: header-args:elisp

* User info
#+begin_src elisp
(setq user-full-name "Zachary Dodge"
      user-mail-address "zacharysdodge@gmail.com")
#+end_src

* Doom theme and font
#+begin_src elisp
(setq doom-theme (if (display-graphic-p) 'doom-solarized-dark 'doom-monokai-machine))
(defun my/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-solarized-light t))
    ('dark (load-theme 'doom-solarized-dark t))))
(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)

(when (display-graphic-p) (setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 16)))
#+end_src

* Keybind to toggle CMD and CTRL behaviors on mac
#+begin_src elisp
(defun toggle-mac-modifiers ()
  (interactive)
  (when (eq system-type 'darwin)
    (setq mac-command-modifier (if (eq mac-command-modifier 'meta) 'control 'meta))
    (setq mac-control-modifier (if (eq mac-command-modifier 'meta) 'control 'meta))))
(map! :leader (:prefix "t"
               :desc "Mac modifiers" "M" #'toggle-mac-modifiers))
#+end_src

* Configure Corfu
#+begin_src elisp
(use-package! corfu
  :custom
  (corfu-preselect 'first))
#+end_src

* Blink cursor and disable scroll acceleration
#+begin_src elisp
(blink-cursor-mode t)
(setq mouse-wheel-progressive-speed nil)
#+end_src

* Don't require confirmation to exit emacs
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

Enable line numbers except in a few modes.
#+begin_src elisp
(global-display-line-numbers-mode)
(dolist (mode '(vterm-mode-hook
                eshell-mode-hook
                org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Typescript indent
Set js/ts/web indent levels to two spaces.
#+begin_src elisp
(setq js-indent-level 2
      typescript-indent-level 2)
(setq web-mode-code-indent-offset 2
      web-mode-markup-indent-offset 2
      web-mode-css-indent-offset 2)
#+end_src

* Magit delta
- Use delta mode in magit
#+begin_src elisp
; Performance isn't great: https://github.com/dandavison/magit-delta/issues/9
(use-package! magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

* Keyboard shortcuts
- Make escape quit (instead of triple escape)
- Make home and end relative to single lines
- Add comment line shortcut
- SPC e as eval-last-sexp
- Setup arrow keys for window navigation
#+begin_src elisp
(map! "<escape>" #'evil-force-normal-state)
(map! :n "q" #'evil-force-normal-state)
(map! :leader "e" #'eval-last-sexp)
(map! :leader :desc "M-x" "SPC" #'execute-extended-command)
(map! :leader (:prefix "w"
               :desc "evil-window-left" "<left>" #'evil-window-left
               :desc "evil-window-down" "<down>" #'evil-window-down
               :desc "evil-window-up" "<up>" #'evil-window-up
               :desc "evil-window-right" "<right>" #'evil-window-right))
#+end_src

* Default Emacs size to 160x48
#+begin_src elisp
(setq initial-frame-alist '((width . 160) (height . 48)))
(map! :leader (:prefix "t"
               :desc "maximize frame" "m" #'toggle-frame-maximized))
#+end_src

* Trigger avy commands on SPC-j.
#+begin_src elisp
(map! :leader :desc "evil-avy-goto-char" "j" #'evil-avy-goto-char)
(map! :leader (:prefix ("J" . "avy")
               :desc "char" "c" #'evil-avy-goto-char
               :desc "line" "l" #'evil-avy-goto-line
               :desc "word" "w" #'evil-avy-goto-word-1))
#+end_src

* When on Windows, change the default directory for faster indexing.
#+begin_src elisp
(when (featurep :system 'windows) (setq default-directory doom-private-dir))
#+end_src

* Setup undo tree with keybindings.
#+begin_src elisp
(use-package! undo-tree
  :hook ((text-mode . undo-tree-mode)
         (prog-mode . undo-tree-mode)))
(map! :after undo-tree
      :leader (:prefix-map ("u" . "undo")
               :desc "redo" "r" #'undo-tree-redo
               :desc "undo" "u" #'undo-tree-undo
               :desc "visualize" "v" #'undo-tree-visualize))
#+end_src

* Setup org and org agenda.
#+begin_src elisp
(use-package! org
  :custom
  (org-hide-emphasis-markers t))
  ;; (org-directory "~/org")
  ;; (org-agenda-files (directory-files-recursively "~/org" "\\.org$")))

(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 120)
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
(use-package! visual-fill-column
  :hook (org-mode . org-mode-visual-fill))
#+end_src

* Ignore build directories in LSP
#+begin_src elisp
(after! lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\\]build\\'")
  (setq lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-hover t))
(defun disable-format-with-lsp ()
  (setq-local +format-with-lsp nil))
(add-hook 'typescript-tsx-mode-hook #'disable-format-with-lsp)
(add-hook 'typescript-mode-hook #'disable-format-with-lsp)
(add-hook 'web-mode-hook #'disable-format-with-lsp)
#+end_src

* Change projectile indexing method to alien
#+begin_src elisp
(after! projectile (setq projectile-indexing-method 'alien))
#+end_src

* Common lisp eval shortcut
#+begin_src elisp
(map! :mode lisp-mode :n "SPC E" #'sly-pprint-eval-last-expression)
#+end_src

* Setup re-builder and query-replace-regexp to work together.
Source: https://karthinks.com/software/bridging-islands-in-emacs-1/
#+begin_src elisp
(defvar my/re-builder-positions nil
  "Store point and region bounds before calling re-builder")
(advice-add 're-builder
            :before
            (defun my/re-builder-save-state (&rest _)
              "Save into `my/re-builder-positions' the point and region
positions before calling `re-builder'."
              (setq my/re-builder-positions
                    (cons (point)
                          (when (region-active-p)
                            (list (region-beginning)
                                  (region-end)))))))

(defun reb-replace-regexp (&optional delimited)
  "Run `query-replace-regexp' with the contents of re-builder. With
non-nil optional argument DELIMITED, only replace matches
surrounded by word boundaries."
  (interactive "P")
  (reb-update-regexp)
  (let* ((re (reb-target-binding reb-regexp))
         (replacement (query-replace-read-to
                       re
                       (concat "Query replace"
                               (if current-prefix-arg
                                   (if (eq current-prefix-arg '-) " backward" " word")
                                 "")
                               " regexp"
                               (if (with-selected-window reb-target-window
                                     (region-active-p)) " in region" ""))
                       t))
         (pnt (car my/re-builder-positions))
         (beg (cadr my/re-builder-positions))
         (end (caddr my/re-builder-positions)))
    (with-selected-window reb-target-window
      (goto-char pnt) ; replace with (goto-char (match-beginning 0)) if you want
                                        ; to control where in the buffer the replacement starts
                                        ; with re-builder
      (setq my/re-builder-positions nil)
      (reb-quit)
      (query-replace-regexp re replacement delimited beg end))))
(use-package! re-builder
  :bind (:map doom-leader-map ("r" . re-builder))
  :hook ((reb-lisp-mode . centaur-tabs-local-mode)
         (reb-lisp-mode . hide-mode-line-mode))
  :custom
  (reb-re-syntax 'string)
  :config
  (map! :map reb-mode-map :n "RET" #'reb-replace-regexp)
  (map! :map reb-mode-map :n "<escape>" #'reb-quit))
#+end_src

* Setup eshell to use ansi color codes
#+begin_src elisp
(defun eshell-prompt ()
  (setenv "TERM" "xterm-256color")
  (ansi-color-apply (shell-command-to-string "starship prompt")))
(after! eshell
  (setenv "TERM" "xterm-256color")
  (setq eshell-prompt-function #'eshell-prompt)
  (setq eshell-highlight-prompt nil))
#+end_src

* Allow crossing beginning and end of lines with horizontal movements
#+begin_src elisp
(after! evil
  (setq evil-cross-lines t)
  (setq evil-want-minibuffer t))
#+end_src

* Setup page up/down as evil-scroll-up/down
#+begin_src elisp
(after! evil
  (map! "<next>" #'evil-scroll-down)
  (map! "<prior>" #'evil-scroll-up)
  (map! "<end>" #'evil-end-of-visual-line)
  (map! "<home>" #'evil-beginning-of-visual-line))
#+end_src

* Setup Evil Colemak with DH mod
#+begin_src elisp
(use-package! evil-colemak-basics
  :init
  (setq evil-colemak-basics-layout-mod 'mod-dh))
(map! :leader
      :prefix "t"
      "C" 'global-evil-colemak-basics-mode)
#+end_src

* Setup kbd-mode for KMonad
#+begin_src elisp
(use-package! kbd-mode)
#+end_src

* Use roswell for lisp
#+begin_src elisp
(setq inferior-lisp-program "ros -Q run")
#+end_src
